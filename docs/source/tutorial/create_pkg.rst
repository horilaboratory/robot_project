############################
ROS2 パッケージをつくろう
############################

　まずはパッケージを作りましょう．ROS2 を始めるのにはパッケージを用意することが不可欠です．

*******************************
パッケージ ``package`` とは
*******************************

　パッケージとはかんたんに言うと **ある機能をまとめたディレクトリ** です．ロボットを動かすためには様々な機能や設定パラメータを用意しなけばならない場合がよくあります．

　あまり良い例えとは言えないかもしれませんが，パッケージはラーメン屋のテーブルによくある調味料棚のようなものです．
ラーメンを食べるために必要な箸や味変するための複数の調味料などが入っている調味料棚は，まさにロボットを動かすための機能やいくつかのパラメータを定義するファイルを内包するパッケージによく似ています．

　パッケージ内に記述するプログラム本体を ROS2 の世界では **``ノード（Node）``** といい，複数のノードを一度に起動するファイルを **Launch ファイル** とよびます．
またあるノードに対する設定情報をまとめたファイルを **パラメータファイル（params ファイル）** と呼び，これらのファイルを内包したディレクトリがパッケージなのです．

********************
パッケージを作ろう
********************

パッケージを作成する場所 ``src`` ディレクトリに移動する
==========================================================

　まずはワークスペースとなる Docker コンテナを起動して，起動したときに出てくる Terminator にアクセスしてください．起動直後のコンテナ内のカレントディレクトリは ``/ws`` となっています．
ここが **ROS2 のワークスペース** となります．

.. hint::

    　**ワークスペース（WorkSpace または ws）** はパッケージをまとめ，そのパッケージらをビルドするためのプロジェクトディレクトリです．

　パッケージを作る場所は決まっており，**ワークスペースの ``src`` ディレクトリに作成することがルールとなっています．**
以下のコマンドを参考に ``src`` ディレクトリに移動してください．

.. code:: bash

    cd /ws/src

パッケージの種類
========================

　パッケージを作成するまえに ROS2 のパッケージには種類があることについて説明させてください．ROS1 ではパッケージに種類という概念はありませんでしたが，ROS2 では大きく分けて以下の２つの種類のパッケージがあります．

- ``ament_cmake``
    
    C++ で構成されたパッケージです． **C++ で書かれたノードを書くときや，メッセージなどを定義したいときはこのパッケージを使用します．** Python ノードもこのパッケージで作成可能です．

- ``ament_python``

    Python で構成されたパッケージです． **Python で書かれたノードを書く場合に使用し，C++ と共存することはできません．**

　このように ROS2 では **どのような構成のパッケージをつくるかによってパッケージの種類を選択する必要があります．** 
ここでは，Python を中心としたパッケージをつくりたいので， ``ament_python`` のパッケージを作成します．

パッケージを作成する
======================

　``src`` ディレクトリ上で以下のコマンドを実行し，**ros2_workshop** という名前の ``ament_python`` パッケージを作成します．

.. code:: bash

    ros2 pkg create ros2_workshop --build-type ament_python

　コマンド ``ros2 pkg create`` は以下のように使用します．オプション ``--build-type`` と ``--licence`` は省略可能で，``--build-type`` はデフォルトだと **ament_cmake** となります． 
``--licence`` はオープンソースライセンスをパッケージに付与するときに使い，パブリックに公開するパッケージを作成する場合は適切なライセンスを付与すべきです．

.. code:: bash

    ros2 pkg create パッケージ名 --build-type [ament_python, ament_cmake] --licence MIT

パッケージの中身について
===========================

 　``ament_python`` パッケージはこのように構成されています．

 .. code::

    ros2_workshop/
    ├── package.xml
    ├── resource
    │   └── ros2_workshop
    ├── ros2_workshop
    │   └── __init__.py
    ├── setup.cfg
    ├── setup.py
    └── test
        ├── test_copyright.py
        ├── test_flake8.py
        └── test_pep257.py

- ``package.xml``

    パッケージの概要が記述されているパファイルです．ここにこのパッケージの依存関係などを記述します．

- ``setup.py``

    パッケージの構築に関する設定ファイルです．ここにビルドしたいノードやパッケージが持つファイルの情報などを記述します．
- ``setup.cfg``

    ``setup.py`` の設定を補助するファイルです．特に、``setup.py`` で定義したノード（実行可能ファイル）をどこにインストールするかといった情報を記述します．ほとんど触ることのないファイルです．

- ``/ros2_workshop``

    Pythonパッケージの本体となるディレクトリです．この中に、ノードのプログラムなど、実際のPythonソースコードを格納します．ディレクトリ名がROSのパッケージ名と同じである必要があります．中にある ``__init__.py`` ファイルは、このディレクトリがPythonのパッケージであることを示すためのファイルです．

- ``/test``

    パッケージのテストコードを格納するディレクトリです．ROS 2では、コードの品質をチェックするためのリントテスト（``test_flake8``: スタイルチェック, ``test_pep257``: ドキュメンテーションチェックなど）が標準で用意されています．ほとんど触ることのないディレクトリですが，テストしたいときに役に立ちます．

- ``/resource``

    ソースコード以外のファイル（リソース）を置くためのディレクトリです．最も重要な役割は、パッケージ名と同じ名前の空のファイルを置くことです（この例では ``ros2_workshop``）．このファイルがあることで、ROS 2のシステムがこのパッケージを正しく見つけられるようになります．ほとんど触ることのないディレクトリです．
