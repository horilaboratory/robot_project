#################################
状態遷移 ``State Machine`` とは
#################################

　このチュートリアルでは ROS2 で利用可能な状態遷移管理パッケージ ``smach`` の使い方を学びます．
しかしその前に，そもそも「状態遷移（ステートマシン）」とは何か，そしてなぜロボット開発においてそれが重要なのかを理解しておきましょう．

==============
状態遷移とは
==============

　**状態遷移**，または **ステートマシン** とは，システムが取りうる「状態」と，ある状態から別の状態へ移り変わるための「遷移」をモデル化したものです．
システムは常にいずれか一つの状態にあり，何らかの「イベント（きっかけ）」をトリガーとして別の状態に遷移します．

.. tip::

    最も身近な例は **信号機** です．

    信号機には「青」「黄」「赤」という３つの状態があります．そして「一定時間が経過する」というイベントによって，「青」→「黄」→「赤」→「青」…と状態が遷移していきます．
    信号機が「青」と「赤」の状態を同時にとることがないように，ステートマシンで管理されたシステムは，必ず一つの明確な状態にあります．

ロボットの動作に置き換えると，以下のように考えることができます．

- **状態（State）**: ロボットの特定の振る舞いや状況．（例：「待機中」「物体探索中」「アームを動かしている」「充電中」）
- **遷移（Transition）**: ある状態から別の状態へ移り変わること．
- **イベント（Event）**: 遷移のきっかけとなる出来事．（例：「開始命令を受け取った」「カメラが物体を検知した」「バッテリー残量が低下した」）

このように，ロボットの一連の複雑なタスクを，個々の「状態」とそれらを繋ぐ「遷移」の組み合わせとして整理するのがステートマシンの考え方です．

====================
状態遷移を使う理由
====================

　ロボットのプログラムを組む際，単純な処理であれば ``if`` 文や ``switch`` 文の組み合わせでも実装可能です．
しかし，ロボットの動作が複雑になるにつれて，これらの分岐処理はどんどん入り組んでしまい，コードが非常に見通しの悪いものになってしまいます．（いわゆる「スパゲッティコード」）

　そこでステートマシンを導入すると，以下のような大きなメリットがあります．

**1. ロジックの明確化**
    プログラムの構造が「現在の状態」と「次の遷移先」という観点で整理されるため，ロボットが今何をしていて，次に何をする可能性があるのかが一目瞭然になります．
    これにより，プログラム全体の流れが非常に理解しやすくなります．

**2. 保守性と拡張性の向上**
    「緊急停止」や「エラーからの復帰」といった新しい動作を追加したくなった場合を考えてみましょう．
    ステートマシンを使っていれば，新しい「状態」を追加し，既存の状態からそこへの「遷移」を定義するだけで済みます．
    複雑に絡み合った ``if`` 文を解読し，修正するよりもはるかに簡単で安全に機能を追加・変更できます．

**3. 堅牢なプログラム**
    タスクの失敗や予期せぬ事態に備えて，「リトライ状態」や「エラー報告状態」などを明確に定義できます．
    これにより，何か問題が発生した際にシステムが停止してしまうのではなく，定められた手順で安全に回復処理へ移行させることができ，プログラム全体の信頼性が向上します．

　``smach`` は，このような強力なステートマシンを ROS2 上で簡単に実装するためのツールです．
次のセクションから，実際に ``smach`` をインストールし，簡単なステートマシンを実装する方法を学んでいきましょう．
